generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid()) 
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  agendas       Agenda[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Status {
  TODO
  INPROGRESS
  DONE
}

model Agenda {
  id       String    @id @default(cuid())
  title    String
  status   Status @default(TODO)
  image    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId   String  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }


//  model Account {
//    id     String @id @default(auto()) @map("_id") @db.ObjectId
//    userId             String  @db.ObjectId
//    type               String
//    provider           String
//    providerAccountId  String
//    refresh_token      String?  
//    access_token       String?  
//    expires_at         Int?
//    token_type         String?
//    scope              String?
//    id_token           String?  
//    session_state      String?

//    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//    @@unique([provider, providerAccountId])
//  }

//  model Session {
//    id     String @id @default(auto()) @map("_id") @db.ObjectId
//    sessionToken String   @unique
//    userId       String  @db.ObjectId
//    expires      DateTime
//    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//  }

//  model User {
//    id     String @id @default(auto()) @map("_id") @db.ObjectId
//    name          String?
//    password     String?
//    email         String?   @unique
//    emailVerified DateTime?
//    image         String?
//    accounts      Account[]
//    sessions      Session[]
//    agendas       Agenda[]
//  }

//  model VerificationToken {
//    id     String @id @default(auto()) @map("_id") @db.ObjectId
//    identifier String
//    token      String   @unique
//    expires    DateTime

//    @@unique([identifier, token])
//  }

// enum Status {
//   TODO
//   INPROGRESS
//   DONE
// }

// model Agenda {
//   id       String @id @default(auto()) @map("_id") @db.ObjectId
//   title    String
//   status   Status @default(TODO)
//   image    String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId   String  @db.ObjectId
//   user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
